package com.safetica.datasafe.utils

import java.security.SecureRandom
import kotlin.experimental.xor

object ByteUtil {

    /**
     * Generates random byte sequences using SecureRandom
     * @param size of generated byte sequence
     */
    fun getRandomBytes(size: Int) : ByteArray {
        val salt = ByteArray(size)
        SecureRandom().nextBytes(salt)
        return salt
    }

    /**
     * Compares bytes of two given arrays.
     * @param bytes
     * @param testBytes
     * @param alsoLength if true, than arrays can have different length
     * @return true if bytes in [bytes] and [testBytes] are identical
     */
    fun compareBytes(bytes: ByteArray, testBytes: ByteArray, alsoLength: Boolean = true): Boolean {
        if (alsoLength && bytes.size != testBytes.size) return false

        var i = 0
        val diff = 0.toByte()

        while (i < bytes.size && i < testBytes.size) {
            if ((bytes[i] xor testBytes[i]) != diff) {
                return false
            }
            i++
        }
        return true
    }
}